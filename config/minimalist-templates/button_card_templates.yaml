---
### CHIPS ###
chip_temperature:
  template: "chips"
  triggers_update: "all"
  label: |
    [[[
      var icon = "üå°Ô∏è";
      var weather_state = states[variables.ulm_chip_temperature_weather].state;
      if (weather_state == "clear-night"){
        var icon = "üåô";
      } else if(weather_state == "cloudy"){
        var icon = "‚òÅÔ∏è";
      } else if(weather_state == "exceptional"){
        var icon = "üåû";
      } else if(weather_state == "fog"){
        var icon = "üå´Ô∏è";
      } else if(weather_state == "hail"){
        var icon = "‚õàÔ∏è";
      } else if(weather_state == "lightning"){
        var icon = "‚ö°";
      } else if(weather_state == "lightning-rainy"){
        var icon = "‚õàÔ∏è";
      } else if(weather_state == "partlycloudy"){
        var icon = "‚õÖ";
      } else if(weather_state == "pouring"){
        var icon = "üåßÔ∏è";
      } else if(weather_state == "rainy"){
        var icon = "üíß";
      } else if(weather_state == "snowy"){
        var icon = "‚ùÑÔ∏è";
      } else if(weather_state == "snowy-rainy"){
        var icon = "üå®Ô∏è";
      } else if(weather_state == "sunny"){
        var icon = "‚òÄÔ∏è";
      } else if(weather_state == "windy"){
        var icon = "üå™Ô∏è";
      }
      function convertTemperature(temp) {
        if (parseFloat(temp) == temp && Math.floor(temp) != temp) {
            return parseFloat(temp).toFixed(1);
        }
        return temp;
      }
      var outside_temp = states[variables.ulm_chip_temperature_outside].state;
      var inside_temp = states[variables.ulm_chip_temperature_inside].state;
      return icon + " " + convertTemperature(outside_temp) + "¬∞ / " + convertTemperature(inside_temp) + "¬∞" ;
    ]]]
chip_icon_only:
  template: "chips"
  label: |
    [[[
      var icon = "‚ùî";
      if (variables.ulm_chip_icon_only){
        var icon = variables.ulm_chip_icon_only;
      }
      return icon;
    ]]]
chip_icon_state:
  template: "chips"
  triggers_update: "all"
  label: |
    [[[
      var icon = "‚ùî";
      if (variables.ulm_chip_icon_state_icon){
        var icon = variables.ulm_chip_icon_state_icon;
      }
      var state = "";
      if (states[variables.ulm_chip_icon_state_entity].state){
        var state = states[variables.ulm_chip_icon_state_entity].state;
        if (states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement){
          state += states[variables.ulm_chip_icon_state_entity].attributes.unit_of_measurement;
        }
      }
      return icon + " " + state;
    ]]]
chip_icon_double_state:
  template: "chips"
  triggers_update: "all"
  label: |
    [[[
      var icon = "‚ùî";
      if (variables.ulm_chip_icon_double_state_icon){
        var icon = variables.ulm_chip_icon_double_state_icon;
      }
      var state1 = "";
      if (states[variables.ulm_chip_icon_double_state_entity_1].state){
        var state1 = states[variables.ulm_chip_icon_double_state_entity_1].state;
        if (states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement){
          state1 += states[variables.ulm_chip_icon_double_state_entity_1].attributes.unit_of_measurement;
        }
      }
      var state2 = "";
      if (states[variables.ulm_chip_icon_double_state_entity_2].state){
        var state2 = states[variables.ulm_chip_icon_double_state_entity_2].state;
        if (states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement){
          state2 += states[variables.ulm_chip_icon_double_state_entity_2].attributes.unit_of_measurement;
        }
      }
      return icon + " " + state1 + " ‚Ä¢ " + state2;
    ]]]
chip_mdi_icon_only:
  template: "chips"
  tap_action:
    action: "more-info"
    entity: "[[[ return variables.ulm_chip_mdi_icon_only_entity ]]]"
  show_icon: true
  icon: "[[[ return variables.ulm_chip_mdi_icon_only_icon ]]]"
  styles:
    grid:
      - grid-template-areas: "'i'"
chip_mdi_icon_state:
  template: "chips"
  tap_action:
    action: "more-info"
    entity: "[[[ return variables.ulm_chip_mdi_icon_state_entity ]]]"
  triggers_update: "all"
  show_icon: true
  icon: "[[[ return variables.ulm_chip_mdi_icon_state_icon ]]]"
  label: "[[[ return states[variables.ulm_chip_mdi_icon_state_entity].state ]]]"
  styles:
    grid:
      - grid-template-areas: "'i l'"
chip_back:
  template: "chips"
  tap_action:
    action: "navigate"
    navigation_path: "[[[ return variables.ulm_chip_back_path; ]]]"
  show_icon: true
  icon: "mdi:arrow-left"
  styles:
    grid:
      - grid-template-areas: "'i'"
chip_presence_detection:
  template: "chips"
  triggers_update: "all"
  label: |
    [[[
      if (!!variables.ulm_chip_presence_counter_guests) {
        return "üè† " +  states[variables.ulm_chip_presence_counter_residents].state + " / " + states[variables.ulm_chip_presence_counter_guests].state;
      } else {
        return "üè† " +  states[variables.ulm_chip_presence_counter_residents].state;
      }
    ]]]
chip_power_consumption:
  template:
    - "chips"
    - "ulm_language_variables"
  triggers_update: "all"
  label: |
    [[[
      var amount = variables.ulm_chip_electric_price != "" ? true : false
      if (amount){
        return "‚ö° " +  states[variables.ulm_chip_electric_price].state + variables.ulm_currency;
      } else {
        return "‚ö° " +  states[variables.ulm_chip_electric_consumption].state;
      }
    ]]]
chip_navigate:
  template: "chips"
  tap_action:
    action: "navigate"
    navigation_path: "[[[ return variables.ulm_chip_navigate_path; ]]]"
  show_icon: true
  icon: "[[[ return variables.ulm_chip_navigate_icon; ]]]"
  styles:
    grid:
      - grid-template-areas: "'i'"
chips_icon_label:
  template: "chips"
  show_icon: true
  show_name: false
  show_label: true
  size: "100%"
  styles:
    card:
      - box-shadow: "var(--box-shadow)"
      - padding-top: "6px"
      - padding-button: "6px"
      - padding-left: "12px"
      - padding-right: "6px"
    grid:
      - grid-template-areas: "'i l'"
      - grid-template-columns: "max_content auto"
      - grid-template-rows: "min-content"
    img_cell:
      - place-self: "center"
      - width: "14px"
      - height: "24px"
    label:
      - justify-self: "center"
      - font-weight: "bold"
      - font-size: "12px"
      - margin-left: "0px"
chips_alarm:
  template:
    - "chips_icon_label"
    - "ulm_language_variables"
  label: |
    [[[
      var alarm_label = variables.ulm_unknown;
      if (entity.state == "armed_home"){
        var alarm_label = variables.ulm_alarm_armed_home;
      } else if(entity.state == "armed_away"){
        var alarm_label = variables.ulm_alarm_armed_away;
      } else if(entity.state == "disarmed"){
        var alarm_label = variables.ulm_alarm_disarmed;
      } else if(entity.state == "arming"){
        var alarm_label = variables.ulm_alarm_arming;
      } else if(entity.state == "triggered"){
        var alarm_label = variables.ulm_alarm_triggered;
      }
      return alarm_label;
    ]]]
  icon: |
    [[[
      var alarm_icon = "mdi:shield-outline";
      if (entity.state == "armed_home"){
        var alarm_icon = "mdi:shield-home";
      } else if(entity.state == "armed_away"){
        var alarm_icon = "mdi:shield-lock";
      } else if(entity.state == "disarmed"){
        var alarm_icon = "mdi:shield-off";
      } else if(entity.state == "arming"){
        var alarm_icon = "mdi:shield";
      } else if(entity.state == "triggered"){
        var alarm_icon = "mdi:shield-alert";
      }
      return alarm_icon;
    ]]]
  styles:
    icon:
      - color: |
          [[[
            var alarm_color = "yellow";
            if (entity.state == "armed_home"){
              var alarm_color = "red";
            } else if(entity.state == "armed_away"){
              var alarm_color = "red";
            } else if(entity.state == "disarmed"){
              var alarm_color = "green";
            } else if(entity.state == "arming"){
              var alarm_color = "orange";
            } else if(entity.state == "triggered"){
              var alarm_color = "red";
            }
            return alarm_color;
          ]]]
### TITLE ###
card_title:
  tap_action:
    action: "none"
  show_icon: false
  show_label: true
  show_name: true
  styles:
    card:
      - background-color: "rgba(0,0,0,0)"
      - box-shadow: "none"
      - height: "auto"
      - width: "auto"
      - margin-top: "12px"
      - margin-left: "24px"
      - margin-bottom: "0px"
    grid:
      - grid-template-areas: "'n' 'l'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content min-content"
    name:
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "1.5rem"
    label:
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "1rem"
      - opacity: "0.4"
### VERTICAL BUTTONS (fka SCENES) ###
vertical_buttons:
  show_label: true
  label: "[[[ return (entity.attributes.value )]]]"
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    label:
      - justify-self: "center"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
    name:
      - margin-top: "10px"
      - justify-self: "center"
      - font-weight: "bold"
      - font-size: "14px"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i' 'n' 'l'"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "10px 0px 8px 0px"
  size: "20px"

vertical_buttons_custom_state:
  template: "vertical_buttons"
  variables:
    state: "default"
    # blue, red, green, yellow, purple, pink
    color: "blue"
  show_last_changed: false
  name: "[[[ return variables.state ]]]"
  styles:
    name:
      - text-transform: "capitalize"
  state:
    - operator: "template"
      value: "[[[ return entity.state == variables.state ]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables.color}), 1)`; ]]]"
        label:
          - color: "[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]"
        name:
          - color: "[[[ return `rgba(var(--color-${variables.color}-text), 1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables.color}), 0.2)`; ]]]"
        card:
          - background-color: "[[[ return `rgba(var(--color-background-${variables.color}), var(--opacity-bg))`; ]]]"
  tap_action:
    action: "call-service"
    service: "input_select.select_option"
    service_data:
      entity_id: "[[[ return entity.entity_id ]]]"
      option: "[[[ return variables.state ]]]"

### CARDS ###
card_generic:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
  label: >
    [[[
      var unit = entity.attributes.unit_of_measurement != null ? " " + entity.attributes.unit_of_measurement : ""
      if (entity.state == "on") {
        return variables.ulm_on;
      } else if (entity.state == "off") {
        return variables.ulm_off;
      } else if (entity.state == "unavailable") {
        return variables.ulm_unavailable;
      } else if (entity.state == "idle") {
        return variables.ulm_idle;
      } else if (entity.state == "open") {
        return variables.ulm_open;
      } else if (entity.state == "closed") {
        return variables.ulm_closed;
      } else {
        return entity.state + unit;
      }
    ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.9)"
    label:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
      - filter: "opacity(100%)"
    name:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    grid:
      - grid-template-areas: "'i l' 'i n'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
card_generic_swap:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
  label: >
    [[[
      var unit = entity.attributes.unit_of_measurement != null ? " " + entity.attributes.unit_of_measurement : ""
      if (entity.state == "on") {
        return variables.ulm_on;
      } else if (entity.state == "off") {
        return variables.ulm_off;
      } else if (entity.state == "unavailable") {
        return variables.ulm_unavailable;
      } else if (entity.state == "idle") {
        return variables.ulm_idle;
      } else if (entity.state == "open") {
        return variables.ulm_open;
      } else if (entity.state == "closed") {
        return variables.ulm_closed;
      } else {
        return entity.state + unit;
      }
    ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.9)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    name:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
      - filter: "opacity(100%)"
    grid:
      - grid-template-areas: "'i n' 'i l'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
card_light:
  template:
    - "icon_info_bg"
    - "yellow"
    - "ulm_language_variables"
  tap_action:
    action: "toggle"
  hold_action:
    action: "more-info"
  label: >-
    [[[
      if (entity.state !="unavailable"){
        if (entity.state =="off"){
          return variables.ulm_off;
        } else if (entity.state == "on"){
          if (entity.attributes.brightness != null){
            var bri = Math.round(entity.attributes.brightness / 2.55);
            return (bri ? bri : "0") + "%";
          } else {
            return variables.ulm_on
          }
        }
      } else {
        return variables.ulm_unavailable;
      }
    ]]]
card_light_slider:
  template:
    - "ulm_language_variables"
  variables:
    ulm_card_light_slider_name: "[[[ return entity.attributes.friendly_name ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: "template"
      value: "[[[ return entity.state == 'on' ]]]"
      styles:
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content min-content"
      - row-gap: "12px"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "yellow_slider"
        entity: "[[[ return entity.entity_id ]]]"
        label: >-
          [[[
            if (entity.state !="unavailable"){
              if (entity.state =="off"){
                return variables.ulm_off;
              } else if (entity.state == "on"){
                if (entity.attributes.brightness != null){
                  var bri = Math.round(entity.attributes.brightness / 2.55);
                  return (bri ? bri : "0") + "%";
                } else {
                  return variables.ulm_on
                }
              }
            } else {
              return variables.ulm_unavailable;
            }
          ]]]
        name: "[[[ return variables.ulm_card_light_slider_name ]]]"
        styles:
          card:
            - box-shadow: "none"
            - border-radius: "var(--border-radius) var(--border-radius) var(--border-radius) var(--border-radius)"
            - padding: "0px"
    item2:
      card:
        type: "custom:my-slider"
        entity: "[[[ return entity.entity_id ]]]"
        radius: "14px"
        height: "42px"
        mainSliderColor: >-
          [[[
            if (entity.state == "unavailable"){
              return "rgba(var(--color-grey),1)";
            }
            return "rgba(var(--color-yellow),1)";
          ]]]
        secondarySliderColor: >-
          [[[
            if (entity.state == "unavailable"){
              return "rgba(var(--color-grey),0.2)";
            }
            return "rgba(var(--color-yellow),0.2)";
          ]]]
        mainSliderColorOff: "rgba(var(--color-theme),0.05)"
        secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
        thumbHorizontalPadding: "0px"
        thumbVerticalPadding: "0px"
        thumbWidth: "0px"
        card_mod:
        style: |
          ha-card {
            border-radius: 14px;
            box-shadow: none;
          }
card_light_slider_collapse:
  template:
    - "ulm_language_variables"
  variables:
    ulm_card_light_slider_collapse_name: "[[[ return entity.attributes.friendly_name ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: "template"
      value: "[[[ return entity.state == 'on' ]]]"
      styles:
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
        grid:
          - row-gap: "12px"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content min-content"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "yellow_slider"
        entity: "[[[ return entity.entity_id ]]]"
        label: >-
          [[[
            if (entity.state !="unavailable"){
              if (entity.state =="off"){
                return variables.ulm_off;
              } else if (entity.state == "on"){
                if (entity.attributes.brightness != null){
                  var bri = Math.round(entity.attributes.brightness / 2.55);
                  return (bri ? bri : "0") + "%";
                } else {
                  return variables.ulm_on
                }
              }
            } else {
              return variables.ulm_unavailable;
            }
          ]]]
        name: "[[[ return variables.ulm_card_light_slider_collapse_name ]]]"
        styles:
          card:
            - box-shadow: "none"
            - border-radius: "var(--border-radius) var(--border-radius) var(--border-radius) var(--border-radius)"
            - padding: "0px"
    item2:
      card:
        type: "conditional"
        conditions:
          - entity: "[[[ return entity.entity_id ]]]"
            state: "on"
        card:
          type: "custom:my-slider"
          entity: "[[[ return entity.entity_id ]]]"
          radius: "14px"
          height: "42px"
          mainSliderColor: "rgba(var(--color-yellow),1)"
          secondarySliderColor: "rgba(var(--color-yellow),0.2)"
          mainSliderColorOff: "rgba(var(--color-theme),0.05)"
          secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
          thumbHorizontalPadding: "0px"
          thumbVerticalPadding: "0px"
          thumbWidth: "0px"
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }
card_light_slider_horizontal:
  template:
    - "ulm_language_variables"
  variables:
    ulm_card_light_slider_horizontal_name: "[[[ return entity.attributes.friendly_name ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: "template"
      value: "[[[ return entity.state == 'on' ]]]"
      styles:
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
  styles:
    grid:
      - grid-template-areas: "'item1 item2'"
      - grid-template-columns: "1fr 1fr"
      - grid-template-rows: "1fr"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "yellow_slider"
        entity: "[[[ return entity.entity_id ]]]"
        label: >-
          [[[
            if (entity.state !="unavailable"){
              if (entity.state =="off"){
                return variables.ulm_off;
              } else if (entity.state == "on"){
                if (entity.attributes.brightness != null){
                  var bri = Math.round(entity.attributes.brightness / 2.55);
                  return (bri ? bri : "0") + "%";
                } else {
                  return variables.ulm_on
                }
              }
            } else {
              return variables.ulm_unavailable;
            }
          ]]]
        name: "[[[ return variables.ulm_card_light_slider_horizontal_name ]]]"
        styles:
          card:
            - box-shadow: "none"
            - border-radius: "var(--border-radius) var(--border-radius) var(--border-radius) var(--border-radius)"
            - padding: "0px"
    item2:
      card:
        type: "custom:my-slider"
        entity: "[[[ return entity.entity_id ]]]"
        radius: "14px"
        height: "42px"
        mainSliderColor: >-
          [[[
            if (entity.state == "unavailable"){
              return "rgba(var(--color-grey),1)";
            }
            return "rgba(var(--color-yellow),1)";
          ]]]
        secondarySliderColor: >-
          [[[
            if (entity.state == "unavailable"){
              return "rgba(var(--color-grey),0.2)";
            }
            return "rgba(var(--color-yellow),0.2)";
          ]]]
        mainSliderColorOff: "rgba(var(--color-theme),0.05)"
        secondarySliderColorOff: "rgba(var(--color-theme),0.05)"
        thumbHorizontalPadding: "0px"
        thumbVerticalPadding: "0px"
        thumbWidth: "0px"
        card_mod:
        style: |
          ha-card {
            border-radius: 14px;
            box-shadow: none;
          }
card_power_outlet:
  template:
    - "icon_info_bg"
    - "yellow"
    - "ulm_language_variables"
  variables:
    ulm_card_power_outlet_consumption_sensor:
  label: |-
    [[[
      if (entity.state === "on" && variables.ulm_card_power_outlet_consumption_sensor !== null) {
        return variables.ulm_on + " ‚Ä¢ " + states[variables.ulm_card_power_outlet_consumption_sensor].state + "W";
      } else if (entity.state === "on") {
        return variables.ulm_on;
      } else if (entity.state === "off") {
        return variables.ulm_off;
      } else if (entity.state === "unavailable") {
        return variables.ulm_unavailable;
      } else {
        return entity.state;
      }
    ]]]
card_binary_sensor:
  template:
    - "icon_info_bg"
    - "blue"
  name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
  show_last_changed: true
card_binary_sensor_alert:
  template:
    - "icon_info_alert"
  name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
  show_last_changed: true
card_input_boolean:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
    - "blue"
  name: "[[[ return entity.attributes.friendly_name != '' ? entity.attributes.friendly_name : entity.entity_id ]]]"
  label: >
    [[[
      if (entity.state != "unavailable"){
        if (entity.state == "on"){
          return variables.ulm_on;
        } else {
          return variables.ulm_off;
        }
      } else {
        return variables.ulm_unavailable;
      }
    ]]]
card_navigate:
  template:
    - "icon_only"
    - "blue_no_state"
  tap_action:
    action: "navigate"
    navigation_path: "[[[ return variables.ulm_card_navigate_path; ]]]"
  label: "[[[ return variables.ulm_card_navigate_title; ]]]"
  icon: "[[[ return variables.ulm_card_navigate_icon; ]]]"
  styles:
    icon:
      - color: "rgba(var(--color-blue),0.7)"
    label:
      - align-self: "center"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
      - filter: "opacity(100%)"
    img_cell:
      - background-color: "rgba(var(--color-blue), 0.2)"
    grid:
      - grid-template-areas: "'i l'"
      - grid-template-columns: "min-content min-content"
      - grid-template-rows: "min-content"
card_media_player:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
  icon: |
    [[[
      var icon = "mdi:speaker";
      if(entity.attributes.app_name){
        var app = entity.attributes.app_name.toLowerCase();
        if(app == "spotify"){
          var icon = "mdi:spotify";
        } else if(app == "google podcasts"){
          var icon = "mdi:google-podcast";
        } else if(app == "plex"){
          var icon = "mdi:plex";
        } else if(app == "soundcloud"){
          var icon = "mdi:soundcloud";
        } else if(app == "youtube music"){
          var icon = "mdi:youtube";
        } else if (app == "oto music"){
          var icon = "mdi:music-circle";
        }
      }
      return icon;
    ]]]
  label: |
    [[[
        if (entity.state == "off"){
          return variables.ulm_off;
        } else {
          return variables.ulm_on;
        }
    ]]]
  state:
    - operator: "template"
      value: "[[[ return entity.state != 'off' ]]]"
      name: "[[[ return states[entity.entity_id].attributes.media_title; ]]]"
      label: |
        [[[
          var label = variables.ulm_on;
          if(states[entity.entity_id].attributes.media_album_name){
            var label = states[entity.entity_id].attributes.media_album_name;
          }
          return label;
        ]]]
card_media_player_with_control:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
  icon: |
    [[[
        var icon = "mdi:speaker";
        if(entity.attributes.app_name){
          var app = entity.attributes.app_name.toLowerCase();
          if(app == "spotify"){
            var icon = "mdi:spotify";
          } else if(app == "google podcasts"){
            var icon = "mdi:google-podcast";
          } else if(app == "plex"){
            var icon = "mdi:plex";
          } else if(app == "soundcloud"){
            var icon = "mdi:soundcloud";
          } else if(app == "youtube music"){
            var icon = "mdi:youtube";
          } else if (app == "oto music"){
            var icon = "mdi:music-circle";
          }
        }
        return icon;
    ]]]
  label: |
    [[[
        if (entity.state == "off"){
          return variables.ulm_off;
        } else {
          return variables.ulm_on;
        }
    ]]]
  state:
    - operator: "template"
      value: "[[[ return entity.state != 'off' ]]]"
      name: "[[[ return states[entity.entity_id].attributes.media_title; ]]]"
      label: |
        [[[
            var label = variables.ulm_on;
            if(states[entity.entity_id].attributes.media_album_name){
              var label = states[entity.entity_id].attributes.media_album_name;
            }
            return label;
        ]]]
      styles:
        label:
          - color: "white"
          - filter: "opacity(100%)"
        img_cell:
          - background-color: "rgba(var(--color-theme),0.0)"
        icon:
          - color: "white"
        name:
          - color: "white"
  styles:
    label:
      - opacity: "0.6"
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
    card:
      - background-blend-mode: "multiply"
      - background: "[[[ return states[entity.entity_id].attributes.entity_picture != null ? 'center / cover url(' + states[entity.entity_id].attributes.entity_picture\
          \ + ') rgba(0, 0, 0, 0.15)' : '' ]]]"
card_battery:
  template:
    - "icon_info_bg"
  tap_action:
    action: "more-info"
  variables:
    ulm_card_battery_attribute:
    ulm_card_battery_battery_state_entity_id:
    ulm_card_battery_charger_type_entity_id:
    ulm_card_battery_battery_level_danger:
    ulm_card_battery_battery_level_warning:
    ulm_card_battery_color_battery_level_danger: "var(--google-red)"
    ulm_card_battery_color_battery_level_warning: "var(--google-yellow)"
    ulm_card_battery_color_battery_level_ok: "var(--google-green)"
  triggers_update: "all"
  icon: |
    [[[
      var icon = "mdi:help-circle-outline";
      //get battery level
      var battery_level = variables.ulm_card_battery_attribute !== null
        ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]
        : states[entity.entity_id].state;

      // generate icon-infix
      var infix;
      if(variables.ulm_card_battery_charger_type_entity_id == null) {
        // is charging?
        infix = variables.ulm_card_battery_battery_state_entity_id !== null
                && states[variables.ulm_card_battery_battery_state_entity_id].state =="charging"
                ? "-charging" : ""
      } else {
        // is charging/ is charging wireless?
        switch (states[variables.ulm_card_battery_charger_type_entity_id].state) {
          case "wireless":
            infix = "-charging-wireless";
            break;
          case "ac":
            infix = "-charging";
            break;
          default:
            infix = "";
        }
      }

      if (battery_level == 100) {
        icon = "mdi:battery";
      } else if (battery_level >= 90) {
        icon = "mdi:battery"+infix+"-90";
      } else if (battery_level >= 80) {
        icon = "mdi:battery"+infix+"-80";
      } else if (battery_level >= 70) {
        icon = "mdi:battery"+infix+"-70";
      } else if (battery_level >= 60) {
        icon = "mdi:battery"+infix+"-60";
      } else if (battery_level >= 50) {
        icon = "mdi:battery"+infix+"-50";
      } else if (battery_level >= 40) {
        icon = "mdi:battery"+infix+"-40";
      } else if (battery_level >= 30) {
        icon = "mdi:battery"+infix+"-30";
      } else if (battery_level >= 20) {
        icon = "mdi:battery"+infix+"-20";
      } else if (battery_level >= 10) {
        icon = "mdi:battery"+infix+"-10";
      } else {
        icon = "mdi:battery"+infix+"-outline";
      }

      return icon;
    ]]]
  label: |
    [[[
      var battery_level = variables.ulm_card_battery_attribute !== null
        ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]
        : states[entity.entity_id].state;
      return battery_level + "%";
    ]]]
  name: |
    [[[
      return states[entity.entity_id].attributes.friendly_name;
    ]]]
  styles:
    icon:
      - color: |
          [[[
            var color = "rgba(var(--color-theme),0.9)";
            var battery_level = variables.ulm_card_battery_attribute !== null
                                  ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]
                                  : states[entity.entity_id].state;

            // color based on battery_level
            if (battery_level !== "unavailable" && (variables.ulm_card_battery_battery_level_danger !== null || variables.ulm_card_battery_battery_level_warning !== null)) {
              if (battery_level <= variables.ulm_card_battery_battery_level_danger) {
                color = variables.ulm_card_battery_color_battery_level_danger;
              } else if (battery_level <= variables.ulm_card_battery_battery_level_warning) {
                color = variables.ulm_card_battery_color_battery_level_warning;
              } else {
                color = variables.ulm_card_battery_color_battery_level_ok;
              }
            }
            return color;
          ]]]
    label:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
      - filter: "opacity(100%)"
    name:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    grid:
      - grid-template-areas: "'i l' 'i n'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
card_person:
  template: "icon_info_bg"
  variables:
    ulm_card_person_use_entity_picture: false
    ulm_card_person_zone1: ""
    ulm_card_person_zone2: ""
  tap_action:
    action: "more-info"
    entity: "[[[ return variables.ulm_card_person_entity; ]]]"
  show_label: true
  show_name: true
  label: "[[[ return states[variables.ulm_card_person_entity].state ]]]"
  name: "[[[ return states[variables.ulm_card_person_entity].attributes.friendly_name ]]]"
  entity: "[[[ return variables.ulm_card_person_entity; ]]]"
  icon: "mdi:face-man"
  show_entity_picture: "[[[ return variables.ulm_card_person_use_entity_picture ]]]"
  entity_picture: "[[[ return variables.ulm_card_person_use_entity_picture != false ? states[variables.ulm_card_person_entity].attributes.entity_picture\
    \ : null ]]]"
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.9)"
      - width: >
          [[[
            if (variables.ulm_card_person_use_entity_picture !== true){
              return "20px";
            } else {
              return "42px";
            }
          ]]]
      - place-self: >
          [[[
            if (variables.ulm_card_person_use_entity_picture !== true){
              return "center";
            } else {
              return "stretch stretch";
            }
          ]]]
    custom_fields:
      notification:
        - border-radius: "50%"
        - position: "absolute"
        - left: "38px"
        - top: "8px"
        - height: "16px"
        - width: "16px"
        - border: "2px solid var(--card-background-color)"
        - font-size: "12px"
        - line-height: "14px"
        - background-color: >
            [[[
              if (states[variables.ulm_card_person_entity].state !== 'home') {
                return "rgba(var(--color-green),1)";
              } else {
                return "rgba(var(--color-blue),1)";
              }
            ]]]
  custom_fields:
    notification: >
      [[[
        if (states[variables.ulm_card_person_entity].state !== 'home') {
          if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone1]?.attributes?.friendly_name) {
            var icon = states[variables.ulm_card_person_zone1].attributes.icon !== null ? states[variables.ulm_card_person_zone1].attributes.icon : 'mdi:help-circle'
            return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          } else if (states[variables.ulm_card_person_entity].state === states[variables.ulm_card_person_zone2]?.attributes?.friendly_name) {
            var icon = states[variables.ulm_card_person_zone2].attributes.icon !== null ? states[variables.ulm_card_person_zone2].attributes.icon : 'mdi:help-circle'
            return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          } else {
            return '<ha-icon icon="mdi:home-minus" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          }
        } else {
          return '<ha-icon icon="mdi:home-variant" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
        }
      ]]]
card_script:
  template:
    - "icon_only"
  label: "[[[ return variables.ulm_card_script_title; ]]]"
  icon: "[[[ return variables.ulm_card_script_icon; ]]]"
  styles:
    icon:
      - color: "rgba(var(--color-blue),0.7)"
    label:
      - align-self: "center"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
      - filter: "opacity(100%)"
    img_cell:
      - background-color: "rgba(var(--color-blue), 0.2)"
    grid:
      - grid-template-areas: "'i l'"
      - grid-template-columns: "min-content min-content"
      - grid-template-rows: "min-content"
card_thermostat:
  template:
    - "icon_info_bg"
    - "ulm_language_variables"
  hold_action:
    action: "more-info"
  label: >-
    [[[
        if (entity.state =='off'){
          var etat = variables.ulm_off ;
        }else if (entity.state == 'heat'){
          var etat = variables.ulm_heat ;
        }else if (entity.state == 'cool'){
          var etat = variables.ulm_cool ;
        }else{
          var etat = variables.ulm_idle;
        }
        if(entity.attributes.temperature){
          return (entity.attributes.temperature ) + '¬∞' + ' ‚Ä¢ ' + etat ;
        }else{
          return etat ;
        }
    ]]]
  icon: "mdi:thermometer"
  state:
    - operator: "template"
      value: >
        [[[
          return entity.state == 'heat'
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-red),1)"
        img_cell:
          - background-color: "rgba(var(--color-red),0.2)"
        card:
          - background-color: "rgba(var(--color-background-red),var(--opacity-bg))"
        name:
          - color: "rgba(var(--color-red-text),1)"
        label:
          - color: "rgba(var(--color-red-text),1)"
### 2-LINE CARDS ###
card_cover_with_buttons:
  variables:
    ulm_card_cover_with_buttons_name: "n/a"
  triggers_update: "all"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content  min-content"
      - row-gap: "12px"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "ulm_language_variables"
          - "cover"
        tap_action:
          action: "more-info"
        entity: "[[[ return variables.ulm_card_cover_with_buttons_entity ]]]"
        name: "[[[ return variables.ulm_card_cover_with_buttons_name ]]]"
    item2:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              tap_action:
                action: "call-service"
                service: "cover.close_cover"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_cover_with_buttons_entity ]]]"
              icon: "mdi:arrow-down"
          item2:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              tap_action:
                action: "call-service"
                service: "cover.stop_cover"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_cover_with_buttons_entity ]]]"
              icon: "mdi:pause"
          item3:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              tap_action:
                action: "call-service"
                service: "cover.open_cover"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_cover_with_buttons_entity ]]]"
              icon: "mdi:arrow-up"
card_graph:
  variables:
    ulm_card_graph_color: "var(--info-color)"
    ulm_card_graph_name: "n/a"
    ulm_card_graph_color2: "var(--info-color)"
    ulm_card_graph_name2: "n/a"
    ulm_card_graph_entity2: ""
    ulm_card_graph_hours: 24
    ulm_card_graph_type: "fill"
  triggers_update: "all"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content  min-content"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "0px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "card_generic"
        styles:
          card:
            - box-shadow: "none"
            - border-radius: "var(--border-radius) var(--border-radius) 0px 0px"
            - padding: "12px"
        entity: "[[[ return variables.ulm_card_graph_entity ]]]"
        name: "[[[ return variables.ulm_card_graph_name ]]]"
    item2:
      card:
        type: "custom:mini-graph-card"
        entities: >
          [[[
            var ent = [];
            ent.push(variables.ulm_card_graph_entity);
            if(variables.ulm_card_graph_entity2 != "")
              ent.push(variables.ulm_card_graph_entity2);
            return ent;
          ]]]
        line_color: >
          [[[
            var col = [];
            col.push(variables.ulm_card_graph_color);
            if(variables.ulm_card_graph_color2 != "")
              col.push(variables.ulm_card_graph_color2);
            return col;
          ]]]
        show:
          name: false
          icon: false
          legend: false
          state: false
          graph: "[[[ return variables.ulm_card_graph_type=='fill'?'line':variables.ulm_card_graph_type; ]]]"
          fill: "[[[ return variables.ulm_card_graph_type=='fill'?true:false; ]]]"
        hours_to_show: "[[[ return variables.ulm_card_graph_hours; ]]]"
        style: |
          ha-card {
            box-shadow: none;
            border-radius: var(--border-radius);
          }
card_media_player_with_controls:
  variables:
    ulm_card_media_player_with_controls_name: "No name set"
    ulm_card_media_player_with_controls_entity:
  triggers_update: "all"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content  min-content"
      - row-gap: "12px"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "ulm_language_variables"
          - "card_media_player"
        tap_action:
          action: "more-info"
        entity: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
        name: "[[[ return variables.ulm_card_media_player_with_controls_name ]]]"
        styles:
          card:
            - box-shadow: "none"
            - padding: "0px"
    item2:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              tap_action:
                action: "call-service"
                service: "media_player.media_previous_track"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
              icon: "mdi:skip-previous"
          item2:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              entity: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
              tap_action:
                action: "call-service"
                service: "media_player.media_play_pause"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
              icon: "mdi:pause"
              state:
                - value: "paused"
                  icon: "mdi:play"
                - value: "off"
                  icon: "mdi:play"
          item3:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              tap_action:
                action: "call-service"
                service: "media_player.media_next_track"
                service_data:
                  entity_id: "[[[ return variables.ulm_card_media_player_with_controls_entity ]]]"
              icon: "mdi:skip-next"
### INTERNAL TEMPLATES ###
blue:
  state:
    - styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        label:
          - color: "rgba(var(--color-blue-text),1)"
        name:
          - color: "rgba(var(--color-blue-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
      value: "on"
blue_no_state:
  styles:
    icon:
      - color: "rgba(var(--color-blue),1)"
    label:
      - color: "rgba(var(--color-blue-text),1)"
    name:
      - color: "rgba(var(--color-blue-text),1)"
    img_cell:
      - background-color: "rgba(var(--color-blue), 0.2)"
    card:
      - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
chips:
  tap_action:
    action: "more-info"
  show_icon: false
  show_label: true
  show_name: false
  show_state: false
  styles:
    label:
      - justify-self: "center"
      - padding: "0px 6px"
      - font-weight: 500
      - font-size: "14px"
    img_cell:
      - width: "24px"
    grid:
      - grid-template-areas: "'l'"
    card:
      - border-radius: "18px"
      - box-shadow: "var(--box-shadow)"
      - height: "36px"
      - width: "auto"
      - padding-left: "6px"
      - padding-right: "6px"
  size: "80%"
cover:
  tap_action:
    action: "more-info"
  icon: |
    [[[
        var icon = "mdi:help-circle";
        if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
          if (states[entity.entity_id].state == "closed"){
            var icon = "mdi:window-shutter";
          } else
            var icon = "mdi:window-shutter-open";
        } else {
          if (states[entity.entity_id].attributes.current_position == 0){
            var icon = "mdi:window-shutter";
          } else
            var icon = "mdi:window-shutter-open";
        }
        return icon ;
    ]]]
  label: >-
    [[[
        var icon = "mdi:help-circle";
        if (typeof states[entity.entity_id].attributes.current_position === "undefined"){
          if (states[entity.entity_id].state == "closed"){
            return variables.ulm_closed;
          } else
            return variables.ulm_open;
        } else {
          if (states[entity.entity_id].attributes.current_position == 0){
            return variables.ulm_closed;
          } else {
            return variables.ulm_open + " ‚Ä¢ " + (states[entity.entity_id].attributes.current_position) + "%" ;
          }
        }
        return icon ;
    ]]]
  state:
    - operator: "template"
      value: "[[[ return states[entity.entity_id].attributes.current_position != 0; ]]]"
      styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue),0.2)"
edge:
  styles:
    card:
      - width: "0px"
icon:
  color: "var(--google-grey)"
  show_icon: true
  show_label: false
  show_name: false
  state:
    - styles:
        custom_fields:
          notification:
            - border-radius: "50%"
            - position: "absolute"
            - left: "24px"
            - top: "-2px"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
            - font-size: "12px"
            - line-height: "14px"
            - background-color: >
                [[[
                  return "rgba(var(--color-red),1)";
                ]]]
      value: "unavailable"
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i'"
      - grid-template-columns: "min-content"
      - grid-template-rows: "min-content"
    card:
      - border-radius: "21px"
      - box-shadow: "none"
      - padding: "0px"
  custom_fields:
    notification: >
      [[[
        if (entity.state =="unavailable"){
          return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
        }
      ]]]
  size: "20px"
icon_only:
  color: "var(--google-grey)"
  show_icon: true
  show_label: true
  show_name: false
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bold"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i l'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  size: "20px"
icon_info:
  color: "var(--google-grey)"
  show_icon: true
  show_label: true
  show_name: true
  state:
    - styles:
        custom_fields:
          notification:
            - border-radius: "50%"
            - position: "absolute"
            - left: "24px"
            - top: "-2px"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
            - font-size: "12px"
            - line-height: "14px"
            - background-color: >
                [[[
                  return "rgba(var(--color-red),1)";
                ]]]
      value: "unavailable"
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    name:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
    state:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bolder"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i n' 'i l'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
    card:
      - border-radius: "21px 8px 8px 21px"
      - box-shadow: "none"
      - padding: "0px"
      # - background-color: "rgba(var(--color-theme),0)"
  custom_fields:
    notification: >
      [[[
        if (entity.state =="unavailable"){
          return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
        }
      ]]]
  size: "20px"
icon_info_bg:
  color: "var(--google-grey)"
  show_icon: true
  show_label: true
  show_name: true
  state:
    - value: "unavailable"
      styles:
        custom_fields:
          notification:
            - border-radius: "50%"
            - position: "absolute"
            - left: "38px"
            - top: "8px"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
            - font-size: "12px"
            - line-height: "14px"
            - background-color: >
                [[[
                  return "rgba(var(--color-red),1)";
                ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bold"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    name:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
    state:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bold"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i n' 'i l'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    notification: >
      [[[
        if (entity.state =="unavailable"){
          return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
        }
      ]]]
  size: "20px"
icon_info_alert:
  color: "var(--google-grey)"
  show_icon: true
  show_label: true
  show_name: true
  state:
    - operator: "template"
      value: "[[[ if (entity.state == 'unavailable' || entity.state == 'on'){ return true; } ]]]"
      styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        label:
          - color: "rgba(var(--color-blue-text),1)"
        name:
          - color: "rgba(var(--color-blue-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
        custom_fields:
          notification:
            - border-radius: "50%"
            - position: "absolute"
            - left: "38px"
            - top: "8px"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
            - font-size: "12px"
            - line-height: "14px"
            - background-color: >
                [[[
                  return "rgba(var(--color-red),1)";
                ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bold"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    name:
      - align-self: "end"
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "14px"
      - margin-left: "12px"
    state:
      - justify-self: "start"
      - align-self: "start"
      - font-weight: "bold"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin-left: "12px"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "50%"
      - place-self: "center"
      - width: "42px"
      - height: "42px"
    grid:
      - grid-template-areas: "'i n' 'i l'"
      - grid-template-columns: "min-content auto"
      - grid-template-rows: "min-content min-content"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    notification: >
      [[[
        if (entity.state =="unavailable" || entity.state == "on"){
          return `<ha-icon icon="mdi:exclamation" style="width: 12px; height: 12px; color: var(--primary-background-color);"></ha-icon>`
        }
      ]]]
  size: "20px"
icon_info_line:
  show_icon: true
  show_label: true
  show_name: false
  styles:
    icon:
      - filter: "opacity(40%)"
    label:
      - padding: "2px"
      - justify-self: "start"
      - align-self: "center"
      - font-weight: "bolder"
      - font-size: "12px"
      - margin-left: "0px"
      - filter: "opacity(40%)"
    img_cell:
      - place-self: "center"
      - width: "14px"
      - height: "24px"
    grid:
      - grid-template-areas: "'i l'"
      - grid-template-columns: "max_content auto"
      - grid-template-rows: "min-content"
    card:
      - box-shadow: "none"
      - padding: "0px"
  size: "100%"
list_2_items:
  styles:
    grid:
      - grid-template-areas: "'item1 item2'"
      - grid-template-columns: "1fr 1fr"
      - grid-template-rows: "min-content"
      - column-gap: "7px"
    card:
      - box-shadow: "none"
      - padding: "0px"
list_3_items:
  styles:
    grid:
      - grid-template-areas: "'item1 item2 item3'"
      - grid-template-columns: "1fr 1fr 1fr"
      - grid-template-rows: "min-content"
      - column-gap: "7px"
    card:
      - box-shadow: "none"
      - padding: "0px"
list_4_items:
  styles:
    grid:
      - grid-template-areas: "'item1 item2 item3 item4'"
      - grid-template-columns: "1fr 1fr 1fr 1fr"
      - grid-template-rows: "min-content"
      - column-gap: "7px"
    card:
      - box-shadow: "none"
      - padding: "0px"
list_one_third_items:
  styles:
    grid:
      - grid-template-areas: "'item1 item2'"
      - grid-template-columns: "2fr 1fr"
      - grid-template-rows: "min-content"
      - column-gap: "7px"
    card:
      - box-shadow: "none"
      - padding: "0px"
list_two_third_items:
  styles:
    grid:
      - grid-template-areas: "'item1 item2'"
      - grid-template-columns: "1fr 2fr"
      - grid-template-rows: "min-content"
      - column-gap: "7px"
    card:
      - box-shadow: "none"
      - padding: "0px"
list_items_line:
  styles:
    grid:
      - grid-template-areas: "'item1 item2 item3'"
      - grid-template-columns: "max-content max-content max-content"
      - grid-template-rows: "min-content"
      - column-gap: "8px"
    card:
      - box-shadow: "none"
      - padding: "0px"
widget_icon:
  tap_action:
    action: "toggle"
  show_icon: true
  show_name: false
  styles:
    grid:
      - grid-template-areas: "'i'"
    card:
      - box-shadow: "none"
      - padding: "0px"
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: "14px"
      - place-self: "center"
      - height: "42px"
    icon:
      - color: "rgba(var(--color-theme),0.9)"
  size: "20px"
  color: "var(--google-grey)"
yellow:
  state:
    - styles:
        icon:
          - color: "rgba(var(--color-yellow),1)"
        label:
          - color: "rgba(var(--color-yellow-text),1)"
        name:
          - color: "rgba(var(--color-yellow-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-yellow), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
      value: "on"
yellow_slider:
  state:
    - styles:
        icon:
          - color: "rgba(var(--color-yellow),1)"
        label:
          - color: "rgba(var(--color-yellow-text),1)"
        name:
          - color: "rgba(var(--color-yellow-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-yellow), 0.2)"
        card:
          - background-color: "rgba(0,0,0,0)"
      value: "on"
### LEGACY TEMPLATES ###
###### CHIPS ###
chips_icon:
  template: "chip_icon_state"
  variables:
    ulm_chip_icon_state_icon: "[[[ return variables.icon ]]]"
    ulm_chip_icon_state_entity: "[[[ return entity.entity_id ]]]"
chips_return:
  template: "chip_back"
  variables:
    ulm_chip_back_path: "/ui-lovelace-minimalist/home"
chips_localisation_present:
  template: "chip_presence_detection"
###### TITLE ###
title:
  template: "card_title"
###### CARDS ###
generic:
  template: "card_generic"
light:
  template: "card_light"
light_slider:
  template: "card_light_slider"
  variables:
    ulm_card_light_slider_name: "[[[ return variables.name ]]]"
binary_sensor:
  template: "card_binary_sensor"
outlet:
  template: "card_power_outlet"
# thermostat:
# template: card_thermostat
cover_buttons:
  template: "card_cover_with_buttons"
  variables:
    ulm_card_cover_with_buttons_name:
    ulm_card_cover_with_buttons_entity:
graph:
  template: "card_graph"
  variables:
    ulm_card_graph_color: "var(--google-blue)"
    ulm_card_graph_name: "Default name"
    ulm_card_graph_entity: "[[[ return entity.entity_id ]]]"
media:
  template: "card_media_player"
battery:
  template: "card_battery"
  variables:
    ulm_card_battery_attribute: "battery"
media_mini_album:
  template: "card_media_player_with_cover"
media_buttons:
  template: "card_media_player_with_controls"
  variables:
    ulm_card_media_player_with_controls_entity: "[[[ return variables.entity ]]]"
    ulm_card_media_player_with_controls_name: "[[[ return variables.name ]]]"
### ITEMS ###
list_items:
  template: "list_3_items"
