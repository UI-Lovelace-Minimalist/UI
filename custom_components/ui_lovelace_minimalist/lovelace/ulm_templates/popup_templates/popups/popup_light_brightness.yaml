---
popup_light_brightness:
  show_icon: false
  show_name: false
  show_label: false
  show_units: false
  styles:
    grid:
      - grid-template-areas: >
          [[[
                var contents = [];
                var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                var color_temp_modes = ["color_temp"];
                var color_modes = ["hs", "rgb", "rgbw", "xy"];
                if (entity.attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                    contents.push("content1");
                }
                if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                    contents.push("content2");
                }
                if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                    contents.push("content3");
                }
                return "\"" + "header ".repeat(contents.length) + "\" " + "\"" + contents.join(" ") + "\" " + "\"" + "footer ".repeat(contents.length) + "\"";
          ]]]
      - grid-template-rows: "16vh 56vh 14vh"
      - grid-template-columns: >
          [[[
                var columns = [];
                var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                var color_temp_modes = ["color_temp"];
                var color_modes = ["hs", "rgb", "rgbw", "xy"];
                if (entity.attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                    columns.push("1fr");
                }
                if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                    columns.push("1fr");
                }
                if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                    columns.push("2fr");
                }
                return columns.join(" ");
          ]]]
    card:
      - background: "var(--primary-background-color)"
      - box-shadow: "none"
      - padding: "4%"
    custom_fields:
      header:
        - align-self: "start"
      content1:
        - align-self: "center"
        - display: >
            [[[
                  var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                  if (entity.attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                      return "block";
                  }
                  return "none";
            ]]]
      content2:
        - align-self: "center"
        - display: >
            [[[
                  var color_temp_modes = ["color_temp"];
                  if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                      return "block";
                  }
                  return "none";
            ]]]
      content3:
        - align-self: "center"
        - display: >
            [[[
                  var color_modes = ["hs", "rgb", "rgbw", "xy"];
                  if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                      return "block";
                  }
                  return "none";
            ]]]
      buttons:
        - display: "none"
      footer:
        - align-self: "end"
        - margin-top: "25px"
  extra_styles: |
    @media (max-width: 800px) {
      #container {
        grid-template-areas: "header" "content1" "buttons" "footer" !important;
        grid-template-rows: 16vh 52vh 14vh 14vh !important;
        grid-template-columns: 1fr !important;
      }
      #buttons {
        display: block !important;
        align-self: start !important;
      }
      #content2 {
        display: none !important;
      }
      #content3 {
        display: none !important;
      }
      #card {
        height: 100vh;
        overflow: hidden;
        position: fixed;
      }
    }
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        template: "popup_header"
        entity: "[[[ return entity.entity_id ]]]"
    content1:
      card:
        type: "custom:my-slider"
        entity: "[[[ return entity.entity_id ]]]"
        radius: "20px"
        rotate: 270
        containerHeight: "320px"
        width: "250px"
        height: "100px"
        top: "100px"
        left: "17%"
        thumbHorizontalPadding: "0px"
        thumbWidth: "0px"
        mainSliderColor: >
          [[[
              var color = entity.attributes.rgb_color;
              if (entity.state == "unavailable"){
                return "rgba(var(--color-grey),1)";
              }
              else if (color){
                return "rgba(" + color + ",1)";
              }
              else{
                return "rgba(var(--color-yellow),1)";
              }
          ]]]
        mainSliderColorOff: "rgba(var(--color-theme),0.1)"
        secondarySliderColor: >
          [[[
              var color = entity.attributes.rgb_color;
              if (entity.state == "unavailable"){
                return "rgba(var(--color-grey),0.2)";
              }
              else if (color){
                return "rgba(" + color + ",0.2)";
              }
              else{
                return "rgba(var(--color-yellow),0.2)";
              }
              ]]]
        secondarySliderColorOff: "var(--color-theme)"
        card_mod:
          style: |
            ha-card {
              background: none !important;
              box-shadow: none !important;
            }
            .slider-container input[type="range"] {
              position: revert !important;
              border: 1px solid rgba(var(--color-theme),0.3) !important;
            }
            .slider-container {
              display: flex;
              justify-content: center;
              align-items: center;
            }
    content2:
      card:
        type: "custom:my-slider"
        entity: "[[[ return entity.entity_id ]]]"
        minBar: "[[[ return entity.attributes.min_mireds ]]]"
        minSet: "[[[ return entity.attributes.min_mireds ]]]"
        maxBar: "[[[ return entity.attributes.max_mireds ]]]"
        maxSet: "[[[ return entity.attributes.max_mireds ]]]"
        function: "Warmth"
        radius: "20px"
        rotate: 270
        containerHeight: "320px"
        width: "250px"
        height: "100px"
        thumbHorizontalPadding: "0px"
        thumbWidth: "2%"
        thumbHeight: "85px"
        thumbColor: "#000"
        mainSliderColor: "rgba(255, 255, 255, 0)"
        mainSliderColorOff: "rgba(255, 255, 255, 0)"
        card_mod:
          style: |
            ha-card {
              background: none !important;
              box-shadow: none !important;
            }
            .slider-container input[type="range"] {
              position: revert !important;
              border: 1px solid rgba(208, 208, 208, 1) !important;
              background: linear-gradient(90deg, #c9f2fc, #fff, #f3db6d);
              --thumb-top: 1px !important;
            }
            .slider-container input[type="range"]::-webkit-slider-thumb {
              margin-top: 7px;
              background-color: rgba(1, 1, 1, 0);
            }
            .slider-container input[type="range"]::-moz-range-thumb {
              background-color: rgba(1, 1, 1, 0);
            }
            .slider-container {
              display: flex;
              justify-content: center;
              align-items: center;
            }
    buttons:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        styles:
          card:
            - background: "none"
          grid:
            - grid-template-areas: >
                [[[
                      var areas = [];
                      var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                      var color_temp_modes = ["color_temp"];
                      var color_modes = ["hs", "rgb", "rgbw", "xy"];
                      if (entity.attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                          areas.push("item1");
                      }
                      if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                          areas.push("item2");
                      }
                      if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                          areas.push("item3");
                      }
                      return "\"" + areas.join(" ") + "\"";
                ]]]
            - grid-template-columns: >
                [[[
                      var columns = [];
                      var brightness_modes = ["brightness", "hs", "color_temp", "rgb", "rgbw", "xy"];
                      var color_temp_modes = ["color_temp"];
                      var color_modes = ["hs", "rgb", "rgbw", "xy"];
                      if (entity.attributes.supported_color_modes.some(r => brightness_modes.includes(r))) {
                          columns.push("1fr");
                      }
                      if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                          columns.push("1fr");
                      }
                      if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                          columns.push("1fr");
                      }
                      return columns.join(" ");
                ]]]
        custom_fields:
          item1:
            card:
              icon: "mdi:lightbulb-on"
              type: "custom:button-card"
              template:
                - "popup_button"
                - "popup_button_selected"
                - "popup_button_brightness"
          item2:
            card:
              icon: "mdi:sun-thermometer-outline"
              type: "custom:button-card"
              template:
                - "popup_button"
                - "popup_button_color_temp"
              styles:
                card:
                  - display: >
                      [[[
                            var color_temp_modes = ["color_temp"];
                            if (entity.attributes.supported_color_modes.some(r => color_temp_modes.includes(r))) {
                                return "block";
                            }
                            return "none";
                      ]]]
              tap_action:
                action: "fire-dom-event"
                browser_mod:
                  command: "popup"
                  hide_header: true
                  card:
                    type: "custom:button-card"
                    template: "popup_light_color_temp"
                    entity: "[[[ return entity.entity_id; ]]]"
          item3:
            card:
              icon: "mdi:palette"
              type: "custom:button-card"
              template:
                - "popup_button"
                - "popup_button_color"
              styles:
                card:
                  - display: >
                      [[[
                            var color_modes = ["hs", "rgb", "rgbw", "xy"];
                            if (entity.attributes.supported_color_modes.some(r => color_modes.includes(r))) {
                                return "block";
                            }
                            return "none";
                      ]]]
              tap_action:
                action: "fire-dom-event"
                browser_mod:
                  command: "popup"
                  hide_header: true
                  card:
                    type: "custom:button-card"
                    template: "popup_light_color"
                    entity: "[[[ return entity.entity_id; ]]]"
    footer:
      card:
        type: "custom:button-card"
        template: "popup_list_items"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "popup_button_back"
          item2:
            card:
              type: "custom:button-card"
              template: "popup_button_power"
              entity: "[[[ return entity.entity_id ]]]"
    content3:
      card:
        type: "custom:light-entity-card"
        entity: "[[[ return entity.entity_id ]]]"
        persist_features: true
        brightness: false
        color_temp: false
        white_value: false
        hide_header: true
        effects_list: false
        smooth_color_wheel: true
        consolidate_entities: true
        child_card: true
        card_mod:
          style: |
            ha-card {
              background: none !important;
              box-shadow: none !important;
              padding: 10px 0 10px 0 !important;
            }
