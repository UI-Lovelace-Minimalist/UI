---
### Actions name ###
ulm_actions_name:
  tap_action:
    action: >
      [[[
        var action = variables.ulm_name_tap_action != null ? variables.ulm_name_tap_action : 'toggle';
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }

        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config) {
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_name_tap_action == 'navigate' ? variables.ulm_name_tap_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_name_tap_haptic != null ? variables.ulm_name_tap_haptic : 'none' ]]]"
    service: "input_select.select_option"
    service_data:
      option: "[[[ return variables.ulm_input_select_option ]]]"
      entity_id: "[[[ return variables.ulm_input_select ]]]"
    browser_mod:
      command: "popup"
      large: true
      hide_header: true
      card:
        type: "custom:button-card"
        template: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'template' in popup_config) {
                return popup_config.template;
              }
            }
          ]]]
        entity: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                return popup_config.entity;
              }
            }

            return (entity != null) ? entity.entity_id : null;
          ]]]
        variables: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                return popup_config.popup_variables;
              }
            }
          ]]]
  hold_action:
    action: >
      [[[
        var action = variables.ulm_name_hold_action != null ? variables.ulm_name_hold_action : 'more-info';
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }

        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config) {
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_name_hold_action == 'navigate' ? variables.ulm_name_hold_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_name_hold_haptic != null ? variables.ulm_name_hold_haptic : 'none' ]]]"
    service: "input_select.select_option"
    service_data:
      option: "[[[ return variables.ulm_input_select_option ]]]"
      entity_id: "[[[ return variables.ulm_input_select ]]]"
    browser_mod:
      command: "popup"
      large: true
      hide_header: true
      card:
        type: "custom:button-card"
        template: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'template' in popup_config) {
                return popup_config.template;
              }
            }
          ]]]
        entity: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                return popup_config.entity;
              }
            }

            return (entity != null) ? entity.entity_id : null;
          ]]]
        variables: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                return popup_config.popup_variables;
              }
            }
          ]]]
  double_tap_action:
    action: >
      [[[
        var action = variables.ulm_name_double_tap_action != null ? variables.ulm_name_double_tap_action : 'adaptive';
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }

        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config){
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_name_double_tap_action == 'navigate' ? variables.ulm_name_double_tap_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_name_double_tap_haptic != null ? variables.ulm_name_double_tap_haptic : 'none' ]]]"
    service: "input_select.select_option"
    service_data:
      option: "[[[ return variables.ulm_input_select_option ]]]"
      entity_id: "[[[ return variables.ulm_input_select ]]]"
    browser_mod:
      command: "popup"
      large: true
      hide_header: true
      card:
        type: "custom:button-card"
        template: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'template' in popup_config) {
                return popup_config.template;
              }
            }
          ]]]
        entity: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                return popup_config.entity;
              }
            }

            return (entity != null) ? entity.entity_id : null;
          ]]]
        variables: >
          [[[
            if (variables.ulm_custom_popup != null ){
              let popup_config = variables.ulm_custom_popup;
              if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                return popup_config.popup_variables;
              }
            }
          ]]]
