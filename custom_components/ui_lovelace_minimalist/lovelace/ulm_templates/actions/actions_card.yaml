---
### Actions card ###
ulm_actions_card:
  tap_action:
    action: >
      [[[
        var action = variables.ulm_card_tap_action != null ? variables.ulm_card_tap_action : 'toggle';
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }
        if (domain == "media_player" && action == 'toggle'){
          action = 'call-service';
        }
        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config) {
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_card_tap_action == 'navigate' ? variables.ulm_card_tap_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_card_tap_haptic != null ? variables.ulm_card_tap_haptic : 'none' ]]]"
    service: >
      [[[
        var action = variables.ulm_card_tap_action;

        if (action == 'adaptive'){
          return 'input_select.select_option';
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return 'media_player.media_play_pause';
        }
        return variables.ulm_card_tap_service;
      ]]]
    service_data: >
      [[[
        var action = variables.ulm_card_tap_action;

        if (action == 'adaptive'){
          return {
            'option': variables.ulm_input_select_option,
            'entity_id': variables.ulm_input_select
          };
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return {
            'entity_id': entity.entity_id
          };
        }
        return variables.ulm_card_tap_service_data;
      ]]]
    browser_mod:
      service: "browser_mod.popup"
      data:
        hide_header: true
        style: |
          --popup-background-color: var(--primary-background-color);
          --popup-border-radius: 20px;
          --popup-padding-x: 24px;
          --popup-padding-y: 20px;
          --popup-min-width: 1000px;
        card_mod:
          style:
            ha-dialog$: |
              @media (max-width: 800px){
                div.mdc-dialog__container {
                  --mdc-dialog-min-width: 100vw;
                  --mdc-dialog-max-width: 100vw;
                  --mdc-dialog-min-height: 100%;
                  --ha-dialog-border-radius: 0px;
                }
              }
        content:
          type: "custom:button-card"
          template: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'template' in popup_config) {
                  return popup_config.template;
                }
              }
            ]]]
          entity: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                  return popup_config.entity;
                }
              }

              return (entity != null) ? entity.entity_id : null;
            ]]]
          variables: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                  return popup_config.popup_variables;
                }
              }
              return {};
            ]]]
  hold_action:
    action: >
      [[[
        var action = variables.ulm_card_hold_action != null ? variables.ulm_card_hold_action : 'more-info';
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }
        if (domain == "media_player" && action == 'toggle'){
          action = 'call-service';
        }
        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config) {
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_card_hold_action == 'navigate' ? variables.ulm_card_hold_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_card_hold_haptic != null ? variables.ulm_card_hold_haptic : 'none' ]]]"
    service: >
      [[[
        var action = variables.ulm_card_hold_action;

        if (action == 'adaptive'){
          return 'input_select.select_option';
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return 'media_player.media_play_pause';
        }
        return variables.ulm_card_hold_service;
      ]]]
    service_data: >
      [[[
        var action = variables.ulm_card_hold_action;

        if (action == 'adaptive'){
          return {
            'option': variables.ulm_input_select_option,
            'entity_id': variables.ulm_input_select
          };
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return {
            'entity_id': entity.entity_id
          };
        }
        return variables.ulm_card_hold_service_data;
      ]]]
    browser_mod:
      service: "browser_mod.popup"
      data:
        hide_header: true
        style: |
          --popup-background-color: var(--primary-background-color);
          --popup-border-radius: 20px;
          --popup-padding-x: 24px;
          --popup-padding-y: 20px;
          --popup-min-width: 1000px;
        card_mod:
          style:
            ha-dialog$: |
              @media (max-width: 800px){
                div.mdc-dialog__container {
                  --mdc-dialog-min-width: 100vw;
                  --mdc-dialog-max-width: 100vw;
                  --mdc-dialog-min-height: 100%;
                  --ha-dialog-border-radius: 0px;
                }
              }
        content:
          type: "custom:button-card"
          template: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'template' in popup_config) {
                  return popup_config.template;
                }
              }
            ]]]
          entity: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                  return popup_config.entity;
                }
              }

              return (entity != null) ? entity.entity_id : null;
            ]]]
          variables: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                  return popup_config.popup_variables;
                }
              }
              return {};
            ]]]
  double_tap_action:
    action: >
      [[[
        var action = variables.ulm_card_double_tap_action != null ? variables.ulm_card_double_tap_action : "adaptive";
        let domain = (entity != null) ? entity.entity_id.substr(0, entity.entity_id.indexOf(".")) : "";

        if (domain == "binary_sensor" || domain == "sensor" || domain == ""){
          if (action == 'toggle')
            action = 'none';
        }

        if (action == 'adaptive' && !(variables.ulm_input_select_option) ){
          action = 'popup'
        }
        if (action == 'adaptive'){
          action = 'call-service'
        }
        if (domain == "media_player" && action == 'toggle'){
          action = 'call-service';
        }
        if (action == 'popup' && (variables.ulm_custom_popup != null )){
          let popup_config = variables.ulm_custom_popup;
          if ((typeof popup_config === 'object') && 'template' in popup_config) {
            action = 'fire-dom-event';
          }
        }

        if (action == 'popup'){
          action = 'more-info'
        }

        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_card_double_tap_action == 'navigate' ? variables.ulm_card_double_tap_navigate_path : '/0' ]]]"
    haptic: "[[[ return variables.ulm_card_double_tap_haptic != null ? variables.ulm_card_double_tap_haptic : 'none' ]]]"
    service: >
      [[[
        var action = variables.ulm_card_double_tap_action;

        if (action == 'adaptive'){
          return 'input_select.select_option';
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return 'media_player.media_play_pause';
        }
        return variables.ulm_card_double_tap_service;
      ]]]
    service_data: >
      [[[
        var action = variables.ulm_card_double_tap_action;

        if (action == 'adaptive'){
          return {
            'option': variables.ulm_input_select_option,
            'entity_id': variables.ulm_input_select
          };
        }
        if((entity != null) && entity.entity_id.startsWith("media_player.")){
          return {
            'entity_id': entity.entity_id
          };
        }
        return variables.ulm_card_double_tap_service_data;
      ]]]
    browser_mod:
      service: "browser_mod.popup"
      data:
        hide_header: true
        style: |
          --popup-background-color: var(--primary-background-color);
          --popup-border-radius: 20px;
          --popup-padding-x: 24px;
          --popup-padding-y: 20px;
          --popup-min-width: 1000px;
        card_mod:
          style:
            ha-dialog$: |
              @media (max-width: 800px){
                div.mdc-dialog__container {
                  --mdc-dialog-min-width: 100vw;
                  --mdc-dialog-max-width: 100vw;
                  --mdc-dialog-min-height: 100%;
                  --ha-dialog-border-radius: 0px;
                }
              }
        content:
          type: "custom:button-card"
          template: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'template' in popup_config) {
                  return popup_config.template;
                }
              }
            ]]]
          entity: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'entity' in popup_config) {
                  return popup_config.entity;
                }
              }

              return (entity != null) ? entity.entity_id : null;
            ]]]
          variables: >
            [[[
              if (variables.ulm_custom_popup != null ){
                let popup_config = variables.ulm_custom_popup;
                if ((typeof popup_config === 'object') && 'popup_variables' in popup_config) {
                  return popup_config.popup_variables;
                }
              }
              return {};
            ]]]
