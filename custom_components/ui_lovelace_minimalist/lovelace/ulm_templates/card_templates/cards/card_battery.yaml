---
### Card Battery ###
card_battery:
  template:
    - "icon_more_info_new"
    - "ulm_translation_engine"
  variables:
    ulm_card_battery_name: "[[[ return entity.attributes.friendly_name ]]]"
    ulm_card_battery_attribute:
    ulm_card_battery_battery_state_entity_id:
    ulm_card_battery_charger_type_entity_id:
    ulm_card_battery_battery_level_danger:
    ulm_card_battery_battery_level_warning:
    ulm_card_battery_color_battery_level_danger: "var(--google-red)"
    ulm_card_battery_color_battery_level_warning: "var(--google-yellow)"
    ulm_card_battery_color_battery_level_ok: "var(--google-green)"
  triggers_update: "all"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return entity.entity_id ]]]"
              icon: |
                [[[
                  // Get battery level
                  const battery_level = variables.ulm_card_battery_attribute !== null ?
                    states[entity.entity_id].attributes[variables.ulm_card_battery_attribute] :
                    states[entity.entity_id].state;
                  // Generate icon infix
                  let infix = "";
                  if (variables.ulm_card_battery_charger_type_entity_id == null) {
                    // Check wether the battery state is charging
                    infix = variables.ulm_card_battery_battery_state_entity_id !== null &&
                      states[variables.ulm_card_battery_battery_state_entity_id].state.toLowerCase() === "charging" ?
                      "-charging" : ""
                  } else {
                    // Select the infix based on the entity charging state
                    switch (states[variables.ulm_card_battery_charger_type_entity_id].state.toLowerCase()) {
                      case "wireless":
                        infix = "-charging-wireless";
                        break;
                      case "charging":
                        infix = "-charging";
                        break;
                      case "ac":
                        infix = "-charging";
                        break;
                      case "usb":
                        infix = "-charging";
                        break;
                      default:
                        infix = "";
                    }
                  }
                  // Generate the icon based on the battery_level
                  let icon = "mdi:help-circle-outline";
                  if (battery_level == 100) {
                    icon = "mdi:battery";
                  } else if (battery_level < 10) {
                    icon = "mdi:battery" + infix + "-outline";
                  } else if (battery_level == "unknown" || battery_level == "unavailable") {
                    icon = "mdi:battery-off";
                  } else {
                    icon = "mdi:battery" + infix + "-" + Math.floor(battery_level / 10) * 10;
                  }
                  return icon;
                ]]]
              styles:
                icon:
                  - color: |
                      [[[
                        const battery_level = variables.ulm_card_battery_attribute !== null ?
                          states[entity.entity_id].attributes[variables.ulm_card_battery_attribute] :
                          states[entity.entity_id].state;
                        // Get the color based on battery_level
                        let color = "rgba(var(--color-theme), 0.9)";
                        if (battery_level !== "unavailable" && (variables.ulm_card_battery_battery_level_danger !== null || variables.ulm_card_battery_battery_level_warning !== null)) {
                          if (battery_level <= variables.ulm_card_battery_battery_level_danger) {
                            color = variables.ulm_card_battery_color_battery_level_danger;
                          } else if (battery_level <= variables.ulm_card_battery_battery_level_warning) {
                            color = variables.ulm_card_battery_color_battery_level_warning;
                          } else if (battery_level == "unknown" || battery_level == "unavailable") {
                            color = variables.ulm_card_battery_color_battery_level_danger;
                          } else {
                            color = variables.ulm_card_battery_color_battery_level_ok;
                          }
                        }
                        return color;
                      ]]]
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return entity.entity_id ]]]"
              name: "[[[ return variables.ulm_card_battery_name ]]]"
              label: |
                [[[
                  const battery_level = variables.ulm_card_battery_attribute !== null
                    ? states[entity.entity_id].attributes[variables.ulm_card_battery_attribute]
                    : states[entity.entity_id].state;
                  return battery_level + "%";
                  if(battery_level == "unknown")
                  { return variables.ulm_translation_state; }
                  else
                  { return battery_level + "%"; }
                ]]]
