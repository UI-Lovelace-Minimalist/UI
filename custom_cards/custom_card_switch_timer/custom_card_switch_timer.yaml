---
custom_card_switch_timer:
  template:
    - "icon_info_bg"
    - "yellow"
  hold_action:
    action: fire-dom-event
    browser_mod:
      service: browser_mod.popup
      data:
        title: "[[[ return `${entity.attributes['friendly_name']} timer` ]]]"
        deviceID:
          - this
        content:
          type: "custom:set-timer-popup"
          entity: "[[[ return variables.ulm_custom_card_switch_timer_timer_entity ]]]"
  variables:
    ulm_custom_card_switch_timer_power_sensor:
  triggers_update: "all"
  label: |-
    [[[
      let labelOutputText = "";

      function convertUtcToTimezone(utcString, timeZone) {
        const utcDate = new Date(utcString);
        const formatter = new Intl.DateTimeFormat("en-US", {
          timeZone: timeZone,
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        });
        const timeInTimezone = formatter.format(utcDate);
        return timeInTimezone;
      }

      function getTimerAction(actionString) {
        switch(actionString) {
          case "turn_on":
            return "Turning on at"
          case "turn_off":
            return "Turning off at"
          case "toggle":
            return "Toggling at"
        }
      }

      if (entity.state == "on") {
        labelOutputText += "On";
      } else if (entity.state == "off") {
        labelOutputText += "Off";
      }


      if (states[variables.ulm_custom_card_switch_timer_timer_entity].state == "set") {
        labelOutputText += ` • ${getTimerAction(states[variables.ulm_custom_card_switch_timer_timer_entity].attributes.action)} ${convertUtcToTimezone(states[variables.ulm_custom_card_switch_timer_timer_entity].attributes.finishing_at, hass.config.time_zone)}`
      }

      if (variables.ulm_custom_card_switch_timer_power_sensor) {
        labelOutputText += ` • ${states[variables.ulm_custom_card_switch_timer_power_sensor].state}W`
      }

      return labelOutputText;
    ]]]
